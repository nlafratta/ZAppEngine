// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Zirpl.AppEngine.VisualStudioAutomation.AppGeneration._templates
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Zirpl.AppEngine.VisualStudioAutomation;
    using Zirpl.AppEngine.VisualStudioAutomation.AppGeneration;
    using Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Config;
    using Zirpl.AppEngine.VisualStudioAutomation.TextTemplating;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class DT_cs : Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.TextTemplating.OncePerDomainTypeTemplate
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Zirpl" +
                    ".AppEngine.Model;\r\nusing Zirpl.AppEngine.Model.Metadata;\r\nusing Zirpl.AppEngine." +
                    "Model.Extensibility;\r\nusing Zirpl.Collections;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.Namespace));
            this.Write("\r\n{\r\n\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IsAbstract ? "abstract" : ""));
            this.Write(" partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.Name));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.InheritsFrom != null ? this.DomainType.InheritsFrom.FullName : "System.Object"));
            this.Write("\r\n\t\t\t, IMetadataDescribed\r\n");

		if (this.DomainType.IsPersistable
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsPersistable))
        {

            this.Write("\t\t\t, IPersistable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IdProperty.DataTypeString));
            this.Write(">\r\n");

        } 
		if (this.DomainType.IsAuditable
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsAuditable))
        {

            this.Write("\t\t\t, IAuditable\r\n");

        } 
		if (this.DomainType.IsExtensible
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsExtensible))
        {

            this.Write("\t\t\t, IExtensible<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.Name));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.ExtendedBy.Name));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IdProperty.DataTypeString));
            this.Write(">\r\n");

        }
		if (this.DomainType.IsExtendedEntityFieldValue
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsExtendedEntityFieldValue))
        {

            this.Write("\t\t\t, IExtendedEntityFieldValue<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.Name));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.Extends.Name));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IdProperty.DataTypeString));
            this.Write(">\r\n");

        }
		if (this.DomainType.IsMarkDeletable
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsMarkDeletable))
        {

            this.Write("\t\t\t, IsMarkDeletable\r\n");

        }
		if (this.DomainType.IsStaticLookup
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsStaticLookup))
        {

            this.Write("\t\t\t, IStaticLookup\r\n");

        }
		if (this.DomainType.IsStaticLookup
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsStaticLookup)
				&& this.DomainType.EnumValues.Any())
        {

            this.Write("\t\t\t, IEnumDescribed<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IdProperty.DataTypeString));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.FullName));
            this.Write("Enum>\r\n");

        }

            this.Write("\t{\r\n");

		if (this.DomainType.Properties.GetCollectionProperties().Any())
        {

            this.Write("\t\t");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IsAbstract ? "protected" : "public"));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.Name));
            this.Write("()\r\n\t\t{\r\n");

			foreach (var collectionProperty in this.DomainType.Properties.GetCollectionProperties())
            {

            this.Write("\t\t\tthis.");
            this.Write(this.ToStringHelper.ToStringWithCulture(collectionProperty.Name));
            this.Write(" = this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(collectionProperty.Name));
            this.Write(" ?? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(collectionProperty.InitializationDataTypeString));
            this.Write("();\r\n");

            }

            this.Write("\t\t}\r\n");

        }
		foreach (var property in this.DomainType.Properties)
		{

            this.Write("\t\tpublic virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.DataTypeString));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            this.Write(" { get; set; }\r\n");

		}

            this.Write("\r\n\t\t#region Interface implementations\r\n\r\n");

		if (this.DomainType.IsPersistable
			&& (this.DomainType.InheritsFrom == null
				|| !this.DomainType.InheritsFrom.IsPersistable))
		{

            this.Write("\t\tpublic virtual Object GetId()\r\n        {\r\n            return Id;\r\n        }\r\n\r\n" +
                    "        public virtual void SetId(Object id)\r\n        {\r\n            Id = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IdProperty.DataTypeString));
            this.Write(@")id;
        }

        public virtual bool IsPersisted
        {
            get { return this.EvaluateIsPersisted(); }
        }

		public override bool Equals(object other)
        {
            return this.EvaluateEquals(other);
        }

        public override int GetHashCode()
        {
            return this.EvaluateGetHashCode();
        }
");

		}
		
		if (this.DomainType.IsExtensible
				&& (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsExtensible))
		{

            this.Write(@"		public virtual IList<IExtendedEntityFieldValue> GetExtendedFieldValues()
		{
            return this.ExtendedFieldValues.Cast<IExtendedEntityFieldValue>().ToList();
		}
        public virtual void SetExtendedFieldValues(IList<IExtendedEntityFieldValue> list)
		{
            this.ExtendedFieldValues.Clear();
            this.ExtendedFieldValues.AddRange(list.Cast<");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.ExtendedBy.FullName));
            this.Write(">());\r\n\t\t}\r\n");

		}

		if (this.DomainType.IsExtendedEntityFieldValue
			&& (this.DomainType.InheritsFrom == null
			|| !this.DomainType.InheritsFrom.IsExtendedEntityFieldValue))
		{

            this.Write(@"        public virtual object GetExtendedEntityId()
        {
            return this.ExtendedEntityId;
        }

        public virtual IExtensible GetExtendedEntity()
        {
            return this.ExtendedEntity;
        }

        public virtual void SetExtendedEntityId(object id)
        {
            this.ExtendedEntityId = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.IdProperty.DataTypeString));
            this.Write(")id;\r\n        }\r\n\r\n        public virtual void SetExtendedEntity(IExtensible enti" +
                    "ty)\r\n        {\r\n            this.ExtendedEntity = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DomainType.Extends.FullName));
            this.Write(")entity;\r\n        }\r\n\t\t\r\n");

		}

            this.Write("\t\t#endregion\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
}
