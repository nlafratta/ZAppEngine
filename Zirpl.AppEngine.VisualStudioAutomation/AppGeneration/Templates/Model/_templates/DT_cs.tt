<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="Zirpl.AppEngine.AppGeneration.App" name="App" #>
<#@ parameter type="Zirpl.AppEngine.AppGeneration.DomainType" name="DomainType" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="TypeName" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Zirpl.AppEngine.Model;
using Zirpl.AppEngine.Model.Metadata;
using Zirpl.AppEngine.Model.Extensibility;

namespace <#= this.Namespace #>
{
	public <#= this.DomainType.IsAbstract ? "abstract" : "" #> partial class <#= this.TypeName #> : <#= this.DomainType.InheritsFrom != null ? this.DomainType.InheritsFrom.FullName : "" #>
			<#= this.DomainType.InheritsFrom != null ? "," : "" #> IMetadataDescribed
<#
		if (this.DomainType.IsPersistable
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsPersistable))
        {
#>
			, IPersistable<<#= this.DomainType.IdProperty.DataTypeString #>>
<#
        } 
		if (this.DomainType.IsAuditable
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsAuditable))
        {
#>
			, IAuditable
<#
        } 
		if (this.DomainType.IsExtensible
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsExtensible))
        {
#>
			, IExtensible<<#= this.DomainType.Name #>,<#= this.DomainType.ExtendedBy.Name #>,<#= this.DomainType.IdProperty.DataTypeString #>>
<#
        }
		if (this.DomainType.IsExtendedEntityFieldValue
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsExtendedEntityFieldValue))
        {
#>
			, IExtendedEntityFieldValue<<#= this.DomainType.Name #>,<#= this.DomainType.Extends.Name #>,<#= this.DomainType.IdProperty.DataTypeString #>>
<#
        }
		if (this.DomainType.IsMarkDeletable
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsMarkDeletable))
        {
#>
			, IsMarkDeletable
<#
        }
		if (this.DomainType.IsStaticLookup
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsStaticLookup))
        {
#>
			, IStaticLookup
<#
        }
		if (this.DomainType.IsStaticLookup
                && (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsStaticLookup)
				&& this.DomainType.EnumValues.Any())
        {
#>
			, IEnumDescribed<<#= this.DomainType.IdProperty.DataTypeString #>,<#= this.DomainType.FullName #>Enum>
<#
        }
#>
	{
		<#= this.DomainType.IsAbstract || this.DomainType.IsPersistable ? "protected" : "public" #> <#= this.TypeName #>()
		{
<#
		foreach (var collectionProperty in this.DomainType.Properties.GetCollectionProperties())
        {
#>
		this.<#= collectionProperty.Name #> = this.<#= collectionProperty.Name #> ?? new <#= collectionProperty.InitializationDataTypeString #>();
<#
        }
#>
		}
<#
		foreach (var property in this.DomainType.Properties.GetNonInterfaceProperties())
		{
#>
		public virtual <#= property.DataTypeString #> <#= property.Name #> { get; set; }
<#
		}
#>

		#region Interface implementations

<#
		foreach (var property in this.DomainType.Properties.GetInterfaceProperties())
		{
#>
		public virtual <#= property.DataTypeString #> <#= property.Name #> { get; set; }
<#
		}
#>

<#
		if (this.DomainType.IsPersistable
			&& (this.DomainType.InheritsFrom == null
				|| !this.DomainType.InheritsFrom.IsPersistable))
		{
#>
		public virtual Object GetId()
        {
            return Id;
        }

        public virtual void SetId(Object id)
        {
            Id = (<#= this.DomainType.IdProperty.DataTypeString      #>)id;
        }

        public virtual bool IsPersisted
        {
            get { return this.EvaluateIsPersisted(); }
        }

		public override bool Equals(object other)
        {
            return this.EvaluateEquals(other);
        }

        public override int GetHashCode()
        {
            return this.EvaluateGetHashCode();
        }
<#
		}
		
		if (this.DomainType.IsExtensible
				&& (this.DomainType.InheritsFrom == null
					|| !this.DomainType.InheritsFrom.IsExtensible))
		{
#>
		public virtual IList<IExtendedEntityFieldValue> GetExtendedFieldValues()
		{
            return this.ExtendedFieldValues.Cast<IExtendedEntityFieldValue>().ToList();
		}
        public virtual void SetExtendedFieldValues(IList<IExtendedEntityFieldValue> list)
		{
            this.ExtendedFieldValues.Clear();
            this.ExtendedFieldValues.AddRange(list.Cast<<#= this.DomainType.ExtendedBy.FullName #>>());
		}
<#
		}

		if (this.DomainType.IsExtendedEntityFieldValue
			&& (this.DomainType.InheritsFrom == null
			|| !this.DomainType.InheritsFrom.IsExtendedEntityFieldValue))
		{
#>
        public virtual object GetExtendedEntityId()
        {
            return this.ExtendedEntityId;
        }

        public virtual IExtensible GetExtendedEntity()
        {
            return this.ExtendedEntity;
        }

        public virtual void SetExtendedEntityId(object id)
        {
            this.ExtendedEntityId = (<#= this.DomainType.IdProperty.DataTypeString      #>)id;
        }

        public virtual void SetExtendedEntity(IExtensible entity)
        {
            this.ExtendedEntity = (<#= this.DomainType.Extends.FullName #>)entity;
        }
		
<#
		}
#>
		#endregion
	}
}