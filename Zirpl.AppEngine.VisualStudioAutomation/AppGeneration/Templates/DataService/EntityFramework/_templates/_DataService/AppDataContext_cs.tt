<#@ template language="C#" linePragmas="false" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.TextTemplating" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation.TextTemplating" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Model" #>
<#@ parameter type="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Model.App" name="App" #>
<#@ parameter type="Zirpl.AppEngine.VisualStudioAutomation.TextTemplating.OutputInfo" name="OutputInfo" #>
using System;
using System.Data.Entity;

namespace <#= this.Namespace #>
{
    public partial class <#= this.TypeName #> : <#= this.Namespace #>.DataContextBase
    {
<#
	foreach (var domainType in App.DomainTypes.Where(o => o.IsPersistable))
    {
#>
		public DbSet<<#= domainType.FullName #>> <#= domainType.PluralName #> { get; set; }
<#
    }
#>

<#
	if (App.DomainTypes.Any(o => o.IsPersistable && !o.IsUpdatable))
    {
#>
		protected override bool IsModifiable(Object obj)
		{
<#
		foreach (var domainType in App.DomainTypes.Where(o => o.IsPersistable && !o.IsUpdatable))
		{
#>
			if (obj is <#= domainType.FullName #>) return false;
<#
		}
#>
			return true;
		}
<#
    }
#>
    }
}

<#+
public string Namespace { get { return ((DotNetTypeOutputInfo)this.OutputInfo).Namespace; } }
public string TypeName { get { return ((DotNetTypeOutputInfo)this.OutputInfo).TypeName; } }
#>