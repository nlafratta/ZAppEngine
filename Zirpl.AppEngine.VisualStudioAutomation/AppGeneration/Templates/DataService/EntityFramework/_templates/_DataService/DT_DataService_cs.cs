// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Templates.DataService.EntityFramework._templates._DataService
{
    using System.Linq;
    using Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.TextTemplating;
    using Zirpl.AppEngine.VisualStudioAutomation.TextTemplating;
    using Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Templates.DataService._templates._DataService;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class DT_DataService_cs : DT_DataService_csBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Data.Entity;\r\nusin" +
                    "g System.Linq;\r\nusing Zirpl.AppEngine;\r\nusing Zirpl.AppEngine.DataService.Entity" +
                    "Framework;\r\nusing Zirpl.AppEngine.Model;\r\nusing Zirpl.AppEngine.Model.Search;\r\n\r" +
                    "\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Namespace));
            this.Write("\r\n{\r\n    public partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataServiceInterfaceFullTypeName));
            this.Write("\r\n    {\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataContextFullTypeName));
            this.Write(" DataContext {get; set;}\r\n        public ISearchCriteriaTranslator<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("> SearchCriteriaTranslator { get; set; }\r\n        public IDbContextCudHandler Dat" +
                    "aContextCudHandler { get; set; }\r\n        public IRetryPolicyFactory RetryPolicy" +
                    "Factory { get; set; }\r\n        \r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName));
            this.Write("()\r\n        {\r\n        }\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataContextFullTypeName));
            this.Write(" dataContext)\r\n        {\r\n            this.DataContext = dataContext;\r\n        }\r" +
                    "\n\r\n        protected IDbSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("> DbSet { get { return this.DataContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.PluralName));
            this.Write("; } }\r\n        \r\n");
 
	if (DomainType.IsInsertable)
    {

            this.Write("        public virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(" Create()\r\n        {\r\n            var entity = this.DbSet.Create();\r\n            " +
                    "this.DataContextCudHandler.MarkInserted<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataContextFullTypeName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(this.DataContext, entity);\r\n            return entity;\r\n        }\r\n\r\n        pu" +
                    "blic virtual TDerivedEntity Create<TDerivedEntity>() where TDerivedEntity : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("\r\n        {\r\n            var entity = this.DbSet.Create<TDerivedEntity>();\r\n     " +
                    "       this.DataContextCudHandler.MarkInserted<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataContextFullTypeName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(this.DataContext, entity);\r\n            return entity;\r\n        }\r\n\t\t\r\n        " +
                    "public virtual void Insert(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@" entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException(""entity"");
            }
            if (this.IsPersisted(entity))
            {
                throw new ArgumentException(""Cannot insert persisted entity"", ""entity"");
            }

            this.DoInsert(entity);
        }
		private void DoInsert(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(" entity)\r\n        {\r\n            this.DataContextCudHandler.MarkInserted<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataContextFullTypeName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(this.DataContext, entity);\r\n        }\r\n\r\n        public virtual void Insert(IEn" +
                    "umerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@"> entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException(""entities"");
            }
            var list = entities.ToList();
            if (!list.Any())
            {
                throw new ArgumentException(""Cannot Insert empty list"", ""entities"");
            }

            foreach (var entity in list)
            {
                if (entity == null
                    || this.IsPersisted(entity))
                {
                    throw new ArgumentException(""Cannot insert a null or persisted entity"", ""entities"");
                }

                this.DoInsert(entity);
            }
        }
");
 
	}

	if (this.DomainType.IsDeletable)
    {

            this.Write("        public virtual void Delete(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@" entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException(""entity"");
            }
            if (!this.IsPersisted(entity))
            {
                throw new ArgumentException(""Cannot Delete an unpersisted entity"", ""entity"");
            }

            this.DoDelete(entity);
        }

        private void DoDelete(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(" entity)\r\n        {\r\n            this.DataContextCudHandler.MarkDeleted<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataContextFullTypeName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(this.DataContext, entity);\r\n        }\r\n\r\n        public virtual void DeleteById" +
                    "(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(" id)\r\n        {\r\n            if (id.IsNullId())\r\n            {\r\n                t" +
                    "hrow new ArgumentException(\"Cannot delete by nonpersisted id\", \"id\");\r\n         " +
                    "   }\r\n\r\n            this.DoDeleteById(id);\r\n        }\r\n\r\n        private void Do" +
                    "DeleteById(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(" id)\r\n        {\r\n            var entity = this.DbSet.Find(id);\r\n            if (e" +
                    "ntity != null)\r\n            {\r\n                this.DoDelete(entity);\r\n         " +
                    "   }\r\n        }\r\n           \r\n        public virtual void Delete(IEnumerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@"> entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException(""entities"");
            }
            var list = entities.ToList();
            if (!list.Any())
            {
                throw new ArgumentException(""Cannot delete from an empty list"", ""entities"");
            }

            foreach (var entity in list)
            {
                if (entity == null
                    || !this.IsPersisted(entity))
                {
                    throw new ArgumentException(""Cannot Delete a null or unpersisted entity"", ""entities"");
                }

                this.DoDelete(entity);
            }
        }

        public virtual void DeleteById(IEnumerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(@"> ids)
        {
            if (ids == null)
            {
                throw new ArgumentNullException(""ids"");
            }
            var list = ids.ToList();
            if (!list.Any())
            {
                throw new ArgumentException(""Cannot delete from an empty list"", ""ids"");
            }

            foreach (var id in list)
            {
                if (id.IsNullId())
                {
                    throw new ArgumentException(""Cannot delete by a nonpersisted id value"", ""ids"");
                }

                this.DoDeleteById(id);
            }
        }
		
		public virtual void Delete(ISearchCriteria searchCriteria)
        {
            if (searchCriteria == null)
            {
                throw new ArgumentNullException(""searchCriteria"");
            }

            var query = this.DbSet.ApplyNonBoundingSearchCriteria<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(searchCriteria, this.SearchCriteriaTranslator);\r\n            foreach (var entit" +
                    "y in query.ToList())\r\n            {\r\n                this.DoDelete(entity);\r\n   " +
                    "         }\r\n        }\r\n\r\n");

    }

	if (this.DomainType.IsUpdatable || this.DomainType.IsInsertable)
    {

            this.Write("        public virtual void Save(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@" entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException(""entity"");
            }

            if (entity.IsPersisted)
            {
                this.DoUpdate(entity);
            }
            else
            {
                this.DoInsert(entity);
            }
        }

        public virtual void Save(IEnumerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@"> entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException(""entities"");
            }
            var list = entities.ToList();
            if (!list.Any())
            {
                throw new ArgumentException(""Cannot Save empty list"", ""entities"");
            }

            foreach (var entity in list)
            {
                if (entity == null)
                {
                    throw new ArgumentException(""Cannot Save null entity"", ""entities"");
                }

                if (entity.IsPersisted)
                {
                    this.DoUpdate(entity);
                }
                else
                {
                    this.DoInsert(entity);
                }
            }
        }
");

    } 

	if (this.DomainType.IsUpdatable)
    {

            this.Write("\r\n        public virtual void Update(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@" entity)
        {
            if (entity == null)
            {
                throw new ArgumentNullException(""entity"");
            }
            if (!this.IsPersisted(entity))
            {
                throw new ArgumentException(""Cannot update nonpersisted entity"", ""entity"");
            }

            this.DoUpdate(entity);
        }

        private void DoUpdate(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(" entity)\r\n        {\r\n            this.DataContextCudHandler.MarkUpdated<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DataContextFullTypeName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(this.DataContext, entity);\r\n        }\r\n\r\n        public virtual void Update(IEn" +
                    "umerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@"> entities)
        {
            if (entities == null)
            {
                throw new ArgumentNullException(""entities"");
            }
            var list = entities.ToList();
            if (!list.Any())
            {
                throw  new ArgumentException(""Cannot Update empty list"", ""entities"");
            }

            foreach (var entity in list)
            {
                if (entity == null
                    || !this.IsPersisted(entity))
                {
                    throw  new ArgumentException(""Cannot update null or nonpersisted entity"", ""entities"");
                }

                this.DoUpdate(entity);
            }
        }
");

	}

            this.Write("\t\t\r\n\t\tpublic virtual void Reload(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@" entity)
        {
            // TOTEST: test
            // TODO: add support for reloading a list

            if (entity == null)
            {
                throw new ArgumentNullException(""entity"");
            }
            if (!this.IsPersisted(entity))
            {
                throw new ArgumentException(""Cannot Reload an unpersisted entity"", ""entity"");
            }

            if (this.RetryPolicyFactory != null)
            {
                this.RetryPolicyFactory.CreateRetryPolicy().ExecuteAction(() => this.DataContext.Entry(entity).Reload());
            }
            else
            {
                this.DataContext.Entry(entity).Reload();   
            }
        }

        public virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(" Get(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(@" id)
        {
            if (id.IsNullId())
            {
                throw new ArgumentException(""Cannot get by unpersisted id"", ""id"");
            }

            return this.RetryPolicyFactory != null
                ? this.RetryPolicyFactory.CreateRetryPolicy().ExecuteAction<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(">(() => this.DbSet.Find(id))\r\n                : this.DbSet.Find(id);\r\n        }\r\n" +
                    "\r\n        public virtual IEnumerable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@"> GetAll()
        {
            var query = from o in this.DbSet
                        select o;
            query = this.ApplyDefaultSort(query);
            var returnCollection = query.ToArray();
            return returnCollection;
        }


        protected virtual bool IsPersisted(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(" entity)\r\n        {\r\n            return entity.IsPersisted;\r\n        }\r\n\r\n       " +
                    " public virtual bool Exists(");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(@" id)
        {
            if (id.IsNullId())
            {
                throw new ArgumentException(""Cannot check for nonpersisted id"", ""id"");
            }

            var exists = this.Get(id) != null;
            return exists;
        }

        public virtual int GetTotalCount(ISearchCriteria searchCriteria)
        {
            if (searchCriteria == null)
            {
                throw new ArgumentNullException(""searchCriteria"");
            }

            var query = this.DbSet.ApplyNonBoundingSearchCriteria<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(@">(searchCriteria, this.SearchCriteriaTranslator);

            return this.RetryPolicyFactory != null 
                ? this.RetryPolicyFactory.CreateRetryPolicy().ExecuteAction<int>(query.Count)
                : query.Count();
        }

        public virtual SearchResults<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("> Search(ISearchCriteria searchCriteria)\r\n        {\r\n            if (searchCriter" +
                    "ia == null)\r\n            {\r\n                throw new ArgumentNullException(\"sea" +
                    "rchCriteria\");\r\n            }\r\n\r\n            var searchResults = new SearchResul" +
                    "ts<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("> {SearchCriteria = searchCriteria};\r\n\r\n            var query = this.DbSet.ApplyN" +
                    "onBoundingSearchCriteria<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(searchCriteria, this.SearchCriteriaTranslator);\r\n            query = this.Apply" +
                    "DefaultSort(query);\r\n            searchResults.TotalCount = query.Count();\r\n    " +
                    "        query = query.ApplyBoundingSearchCriteria<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(searchCriteria);\r\n\r\n            searchResults.Results = this.RetryPolicyFactory" +
                    " != null\r\n                ? this.RetryPolicyFactory.CreateRetryPolicy().ExecuteA" +
                    "ction<IList<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(">>(query.ToList)\r\n                : query.ToList();\r\n            \r\n            re" +
                    "turn searchResults;\r\n        }\r\n\r\n        public virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(@" SearchUnique(ISearchCriteria searchCriteria)
        {
            if (searchCriteria == null)
            {
                throw new ArgumentNullException(""searchCriteria"");
            }

            var query = this.DbSet.ApplyNonBoundingSearchCriteria<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.IdProperty.DataTypeString));
            this.Write(">(searchCriteria, this.SearchCriteriaTranslator);\r\n\r\n            return this.Retr" +
                    "yPolicyFactory != null\r\n                ? this.RetryPolicyFactory.CreateRetryPol" +
                    "icy().ExecuteAction<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(">(query.SingleOrDefault)\r\n                : query.SingleOrDefault();\r\n        }\r\n" +
                    "\r\n        public virtual IQueryable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("> GetQueryable()\r\n        {\r\n            var result = from o in this.DbSet\r\n     " +
                    "                   select o;\r\n\r\n            result = this.ApplyDefaultSort(resul" +
                    "t);\r\n            return result;\r\n        }\r\n\r\n        protected virtual IQueryab" +
                    "le<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("> ApplyDefaultSort(IQueryable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write("> query)\r\n        {\r\n            query = from o in query\r\n                       " +
                    "  orderby o.Id\r\n                         select o;\r\n\r\n            return query;\r" +
                    "\n            //return new QueryableWrapper<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DomainType.FullName));
            this.Write(">(query, null);\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

public bool ShouldTransform { get { return this.DomainType.IsPersistable; } }
private string DataContextFullTypeName {get { return this.AsTransform().GetGeneratedTypeInfo<AppDataContext_cs>().FullTypeName; }}
private string DataServiceInterfaceFullTypeName {get { return this.AsTransform().GetGeneratedTypeInfo<I_DT_DataService_cs>().FullTypeName; }}


private global::Zirpl.AppEngine.AppGeneration.App _AppField;

/// <summary>
/// Access the App parameter of the template.
/// </summary>
private global::Zirpl.AppEngine.AppGeneration.App App
{
    get
    {
        return this._AppField;
    }
}

private global::Zirpl.AppEngine.AppGeneration.DomainType _DomainTypeField;

/// <summary>
/// Access the DomainType parameter of the template.
/// </summary>
private global::Zirpl.AppEngine.AppGeneration.DomainType DomainType
{
    get
    {
        return this._DomainTypeField;
    }
}

private string _NamespaceField;

/// <summary>
/// Access the Namespace parameter of the template.
/// </summary>
private string Namespace
{
    get
    {
        return this._NamespaceField;
    }
}

private string _TypeNameField;

/// <summary>
/// Access the TypeName parameter of the template.
/// </summary>
private string TypeName
{
    get
    {
        return this._TypeNameField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool AppValueAcquired = false;
if (this.Session.ContainsKey("App"))
{
    this._AppField = ((global::Zirpl.AppEngine.AppGeneration.App)(this.Session["App"]));
    AppValueAcquired = true;
}
if ((AppValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("App");
    if ((data != null))
    {
        this._AppField = ((global::Zirpl.AppEngine.AppGeneration.App)(data));
    }
}
bool DomainTypeValueAcquired = false;
if (this.Session.ContainsKey("DomainType"))
{
    this._DomainTypeField = ((global::Zirpl.AppEngine.AppGeneration.DomainType)(this.Session["DomainType"]));
    DomainTypeValueAcquired = true;
}
if ((DomainTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DomainType");
    if ((data != null))
    {
        this._DomainTypeField = ((global::Zirpl.AppEngine.AppGeneration.DomainType)(data));
    }
}
bool NamespaceValueAcquired = false;
if (this.Session.ContainsKey("Namespace"))
{
    this._NamespaceField = ((string)(this.Session["Namespace"]));
    NamespaceValueAcquired = true;
}
if ((NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Namespace");
    if ((data != null))
    {
        this._NamespaceField = ((string)(data));
    }
}
bool TypeNameValueAcquired = false;
if (this.Session.ContainsKey("TypeName"))
{
    this._TypeNameField = ((string)(this.Session["TypeName"]));
    TypeNameValueAcquired = true;
}
if ((TypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TypeName");
    if ((data != null))
    {
        this._TypeNameField = ((string)(data));
    }
}


    }
}


    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class DT_DataService_csBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
