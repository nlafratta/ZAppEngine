<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".log" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Zirpl.AppEngine.Model" #>
<#@ import namespace="Zirpl.AppEngine.Model.Metadata" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.TextTemplating" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.V1" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.V1.ConfigModel" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="VSLangProj80" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Serialization" #>
<#@ assembly name="System.Xml.Serialization" #>
<#

	// Generate Validation classes
	//
	foreach (DomainType domainType in this.Helper.DomainTypesToGenerateValidatorFor)
	{
		this.Helper.StartValidatorFile(domainType);
	
#>

using System;
using FluentValidation;
using Zirpl.AppEngine.Validation;
using Zirpl.AppEngine.Validation.EntityFramework;
using <#= this.Helper.GetModelNamespace(domainType) #>;
using <#= this.Helper.GetMetadataConstantsNamespace(domainType) #>;

namespace <#= this.Helper.GetValidatorNamespace(domainType) #>
{
    public<#= domainType.IsAbstract ? " abstract" : "" #> partial class <#= this.Helper.GetValidatorTypeName(domainType) #> <#= this.Helper.GetValidatorBaseDeclaration(domainType) #>
		<#= this.Helper.GetValidatorGenericConstraintDeclaration(domainType) #>
    {
        <#= domainType.IsAbstract ? "protected" : "public" #> <#= this.Helper.GetValidatorContructorMemberName(domainType) #>()
        {
<#
		if (domainType.Properties != null)
        {
			foreach (var property in domainType.Properties)
			{
				if (property.IsCollection)
				{
#>
			// unsure how to follow this for validation or even if it should with EF- Collection property: <#= property.Name #>
<#
				}
				else
				{
					string propertyType = property.Type;
					propertyType = propertyType.ToLowerInvariant() == "currency" ? "decimal" : propertyType;
					if (propertyType == "string")
					{
#>
			this.RuleFor(o => o.<#= property.Name #>)<#= property.IsRequired ? ".Cascade(CascadeMode.StopOnFirstFailure).NotEmpty()" : ""  #>.Length(<#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>_MinLength, <#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>_MaxLength);
<#

					}
					else if (propertyType.ToLowerInvariant() == "int"
							||propertyType.ToLowerInvariant() == "decimal"
							||propertyType.ToLowerInvariant() == "double"
							||propertyType.ToLowerInvariant() == "byte")
					{
						//var notNullOrNotEmptyTest = property.IsRequired 
						//	? "" 
						//	: (property.MinValue == 0 
						//		|| property.MaxValue == 0
						//		|| (property.MinValue < 0 && property.MaxValue > 0)) 
						//		? ".NotNull()"
						//		: ".NotEmpty()";
#>
			this.RuleFor(o => o.<#= property.Name #>)<#= property.IsRequired ? ".Cascade(CascadeMode.StopOnFirstFailure).NotNull()" : ""  #>.InclusiveBetween(<#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>_MinValue, <#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>_MaxValue);
<#
					}
					else if (propertyType.ToLowerInvariant() == "datetime"
							||propertyType.ToLowerInvariant() == "guid")
				    {
					// TODO: what if not required AND nullable BUT has value
						if (property.IsRequired)
				        {
#>
			this.RuleFor(o => o.<#= property.Name #>).NotEmpty();
<#
						}
						else
						{
#>
			this.When(o =>  o.<#= property.Name #>.HasValue, () => {
				this.RuleFor(o => o.<#= property.Name #>).NotEmpty();
			});
<#
			          }
			       }
					else if (propertyType.ToLowerInvariant() == "bool")
			       {
#>
			this.RuleFor(o => o.<#= property.Name #>)<#= property.IsRequired ? ".NotNull()" : ""  #>;
<#
			     }
					else if (property.IsRelationship)
			      {
						if (property.IsRequired)
				      {
#>
            this.ForeignEntityNotNullAndIdMatches(o => o.<#= property.Name #>, o => o.<#= property.Name #>Id,
                <#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>_Name, <#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>Id_Name);
<#
				      }
						else
				      {
#>
            this.ForeignEntityAndIdMatchIfNotNull(o => o.<#= property.Name #>, o => o.<#= property.Name #>Id,
                <#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>_Name, <#= this.Helper.GetMetadataConstantsTypeName(domainType)  #>.<#= property.Name #>Id_Name);
<#
					    }
				    }
				}
			}
        }
#>

			this.OnCustomValidation();
        }

		partial void OnCustomValidation();
    }
}

<#
	}
#>