<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".log" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.TextTemplating" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.V1" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.V1.ConfigModel" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="VSLangProj80" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Serialization" #>
<#
// Generate Model classes
//
foreach (DomainType domainType in this.Helper.DomainTypesToGenerateModelFor)
{
	this.Helper.StartModelFile(domainType);
		
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Zirpl.AppEngine.Model;
using Zirpl.AppEngine.Model.Customization;
<#
	if (domainType.IsCustomizable)
	{
#>
using <#= this.Helper.GetCustomFieldValueNamespace(domainType) #>;
<#
    }
#>

namespace <#= this.Helper.GetModelNamespace(domainType) #>
{
    public<#= domainType.IsAbstract ? " abstract" : "" #> partial class <#= this.Helper.GetModelTypeName(domainType) #> <#= this.Helper.GetModelBaseDeclaration(domainType) #>
    {
<#

	// make sure properties is NOT null
	domainType.Properties = domainType.Properties ?? new Property[] {};

	if (domainType.Properties.Length > 0
		|| domainType.IsCustomizable)
	{
		// grab all the collection properties now so we
		// can add initializers in the Constructor
		//
		var collectionProperties = from p in domainType.Properties
									where p.IsCollection
									select p;
		if (collectionProperties.Count() > 0
			|| domainType.IsCustomizable)
		{
			// handle the constructor
#>
		public <#= this.Helper.GetModelTypeName(domainType) #>()
		{
<#
			// initialize any collection properties (everything defaults to IList<T>
			foreach (var collectionProperty in collectionProperties)
			{
#>
			this.<#= collectionProperty.Name #> = this.<#= collectionProperty.Name #> ?? new List<<#= collectionProperty.CollectionOfType #>>();
<#
			}
			if (domainType.IsCustomizable)
			{
#>
			this.CustomFieldValues = this.CustomFieldValues ?? new List<<#= this.Helper.GetCustomFieldValueTypeName(domainType) #>>();
<#
			}
#>
		}
		
<#
		}

		// now go through ALL properties
		foreach (var property in domainType.Properties)
		{
			if (property.IsCollection)
			{
#>
		public virtual IList<<#= property.CollectionOfType #>> <#= property.Name #> { get; set; }
<#
			}
			else
			{
				// the base class already has "Name" property, so skip that one
				if (!(property.Name == "Name"
					&& domainType.IsDictionary))
                {
#>
		public virtual <#= this.Helper.GetPropertyTypeName(property) #> <#= property.Name #> { get; set; }
<#
					// handle the Id property of the relationship IE: "Parent" may need a "ParentId" property
					if (property.IsRelationship
						&& property.GenerateIdProperty)
					{
#>
		public virtual <#= this.Helper.GetRelationshipIdPropertyTypeName(property) #> <#= property.Name #>Id { get; set; }
<#
					}
                }
			}
		}
	}
	if (domainType.IsCustomizable)
    {
#>

		#region CustomFields
		public virtual IList<<#= this.Helper.GetCustomFieldValueTypeName(domainType) #>> CustomFieldValues { get; set; }
        public virtual IList<ICustomFieldValue> GetCustomFieldValues()
        {
            return this.CustomFieldValues.OfType<ICustomFieldValue>().ToList();
        }	
		public virtual void SetCustomFieldValues(IList<ICustomFieldValue> list)
		{
		    this.CustomFieldValues = list.OfType<<#= this.Helper.GetCustomFieldValueTypeName(domainType) #>>().ToList();
		}
		#endregion
<#
    }
#>
    }
}

<#
}
#>