// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Zirpl.AppEngine.CodeGeneration.V1.Templates.Tests.Service.EntityFramework
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using Zirpl.AppEngine.CodeGeneration;
    using Zirpl.AppEngine.CodeGeneration.TextTemplating;
    using Zirpl.AppEngine.CodeGeneration.V1;
    using Zirpl.AppEngine.CodeGeneration.V1.ConfigModel;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ServiceTestsTemplate : ServiceTestsTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 18 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"

	foreach (DomainType domainType in this.Helper.DomainTypesToGenerateDataServiceFor)
	{
		this.Helper.StartServiceTestsFile(domainType);
		if (!domainType.IsDictionary)
        {			


            
            #line default
            #line hidden
            this.Write("\t\t\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing FluentAssertions;\r\nus" +
                    "ing NUnit.Framework;\r\nusing Zirpl.AppEngine.Testing;\r\nusing Zirpl.AppEngine.Vali" +
                    "dation;\r\nusing ");
            
            #line 32 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetModelNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 33 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetPersistableModelTestsEntityWrapperNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 34 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetDataServiceInterfaceNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 35 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetDataContextNamespace()));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 36 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace ");
            
            #line 38 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write("\r\n{\t\r\n\t[TestFixture]\r\n    public partial class ");
            
            #line 41 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 41 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsBaseTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\t}\r\n\r\n    [TestFixture]\r\n    public abstract partial class ");
            
            #line 46 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsBaseTypeName(domainType)));
            
            #line default
            #line hidden
            
            #line 46 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsBaseTypeBaseDeclaration(domainType)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\t\tprotected ");
            
            #line 48 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(" Service {get { return this.DependencyResolver.Resolve<");
            
            #line 48 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(">(); } }\r\n\t\tprotected ");
            
            #line 49 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsServicesProviderTypeName()));
            
            #line default
            #line hidden
            this.Write(" Services {get { return this.DependencyResolver.Resolve<");
            
            #line 49 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsServicesProviderTypeName()));
            
            #line default
            #line hidden
            this.Write(">(); } }\r\n\t\t\r\n\t\tprotected override TSupports GetLayer<TSupports>()\r\n        {\r\n  " +
                    "          return this.DependencyResolver.Resolve<");
            
            #line 53 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(">() as TSupports;\r\n        }\t\t\r\n        protected override AppEngine.DataService." +
                    "EntityFramework.DbContextBase CreateNewDbContext()\r\n        {\r\n            retur" +
                    "n new ");
            
            #line 57 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetDataContextTypeName()));
            
            #line default
            #line hidden
            this.Write("();\r\n        }\r\n\r\n\t\t// AUTOGENERATE CODE NOTE: the tests are overridden here so t" +
                    "hat they will be easily identified when run as relating to this domain type. \r\n\r" +
                    "\n\t\t[Test]\r\n        [ExpectedException(typeof(ValidationException))]\r\n        pub" +
                    "lic override void TestInsert_ValidationGetsCalled()\r\n        {\r\n\t\t\tbase.TestInse" +
                    "rt_ValidationGetsCalled();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedExcept" +
                    "ion(typeof(ValidationException))]\r\n        public override void TestUpdate_Valid" +
                    "ationGetsCalled()\r\n        {\r\n\t\t\tbase.TestUpdate_ValidationGetsCalled();\r\n      " +
                    "  }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ValidationException))]\r" +
                    "\n        public override void TestSave_Insert_ValidationGetsCalled()\r\n        {\r" +
                    "\n\t\t\tbase.TestSave_Insert_ValidationGetsCalled();\r\n        }\r\n\r\n        [Test]\r\n " +
                    "       [ExpectedException(typeof(ValidationException))]\r\n        public override" +
                    " void TestSave_Update_ValidationGetsCalled()\r\n        {\r\n\t\t\tbase.TestSave_Update" +
                    "_ValidationGetsCalled();\r\n        }\r\n\r\n        [Test]\r\n        public override v" +
                    "oid TestDelete_ValidationDoesNotGetCalled()\r\n        {\r\n\t\t\tbase.TestDelete_Valid" +
                    "ationDoesNotGetCalled();\r\n        }\r\n\r\n        [Test]\r\n        public override v" +
                    "oid TestGet()\r\n        {\r\n\t\t\tbase.TestGet();\r\n        }\r\n\r\n        [Test]\r\n     " +
                    "   [ExpectedException(typeof(ArgumentException))]\r\n        public override void " +
                    "TestGet_NonPersistedId()\r\n        {\r\n\t\t\tbase.TestGet_NonPersistedId();\r\n        " +
                    "}\r\n\r\n        [Test]\r\n        public override void TestGet_NonExistentId()\r\n     " +
                    "   {\r\n\t\t\tbase.TestGet_NonExistentId();\r\n        }\r\n\r\n        [Test]\r\n        pub" +
                    "lic override void TestInsert()\r\n        {\r\n\t\t\tbase.TestInsert();\r\n        }\r\n\r\n " +
                    "       [Test]\r\n        [ExpectedException(typeof(ArgumentNullException))]\r\n     " +
                    "   public override void TestInsert_Null()\r\n        {\r\n\t\t\tbase.TestInsert_Null();" +
                    "\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentExcepti" +
                    "on))]\r\n        public override void TestInsert_Persisted()\r\n        {\r\n\t\t\tbase.T" +
                    "estInsert_Persisted();\r\n        }\r\n\r\n        [Test]\r\n        public override voi" +
                    "d TestInsert_List()\r\n        {\r\n\t\t\tbase.TestInsert_List();\r\n        }\r\n\r\n       " +
                    " [Test]\r\n        [ExpectedException(typeof(ArgumentNullException))]\r\n        pub" +
                    "lic override void TestInsert_List_Null()\r\n        {\r\n\t\t\tbase.TestInsert_List_Nul" +
                    "l();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentExc" +
                    "eption))]\r\n        public override void TestInsert_List_Empty()\r\n        {\r\n\t\t\tb" +
                    "ase.TestInsert_List_Empty();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedExce" +
                    "ption(typeof(ArgumentException))]\r\n        public override void TestInsert_List_" +
                    "WithPersisted()\r\n        {\r\n\t\t\tbase.TestInsert_List_WithPersisted();\r\n        }\r" +
                    "\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n     " +
                    "   public override void TestInsert_List_WithNull()\r\n        {\r\n\t\t\tbase.TestInser" +
                    "t_List_WithNull();\r\n        }\r\n\r\n        [Test]\r\n        public override void Te" +
                    "stExists()\r\n        {\r\n\t\t\tbase.TestExists();\r\n        }\r\n\r\n        [Test]\r\n     " +
                    "   [ExpectedException(typeof(ArgumentException))]\r\n        public override void " +
                    "TestExists_NonPersistedId()\r\n\t\t{\r\n\t\t\tbase.TestExists_NonPersistedId();\r\n        " +
                    "}\r\n\r\n        [Test]\r\n        public override void TestExists_NonExistentId()\r\n  " +
                    "      {\r\n\t\t\tbase.TestExists_NonExistentId();\r\n        }\r\n\r\n        [Test]\r\n     " +
                    "   public override void TestGetAll()\r\n        {\r\n\t\t\tbase.TestGetAll();\r\n        " +
                    "}\r\n\r\n        [Test]\r\n        public override void TestGetQueryable()\r\n        {\r" +
                    "\n\t\t\tbase.TestGetQueryable();\r\n        }\r\n\r\n        [Test]\r\n        public overri" +
                    "de void TestGetTotalCount()\r\n        {\r\n\t\t\tbase.TestGetTotalCount();\r\n        }\r" +
                    "\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentNullException))]\r\n " +
                    "       public override void TestGetTotalCount_Null()\r\n        {\r\n\t\t\tbase.TestGet" +
                    "TotalCount_Null();\r\n        }\r\n\r\n        [Test]\r\n        public override void Te" +
                    "stUpdate()\r\n        {\r\n\t\t\tbase.TestUpdate();\r\n        }\r\n\r\n        [Test]\r\n     " +
                    "   [ExpectedException(typeof(ArgumentNullException))]\r\n        public override v" +
                    "oid TestUpdate_Null()\r\n        {\r\n\t\t\tbase.TestUpdate_Null();\r\n        }\r\n\r\n     " +
                    "   [Test]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n        publi" +
                    "c override void TestUpdate_NotPersisted()\r\n        {\r\n\t\t\tbase.TestUpdate_NotPers" +
                    "isted();\r\n        }\r\n\r\n        [Test]\r\n        public override void TestUpdate_L" +
                    "ist()\r\n        {\r\n\t\t\tbase.TestUpdate_List();\r\n        }\r\n\r\n        [Test]\r\n     " +
                    "   [ExpectedException(typeof(ArgumentNullException))]\r\n        public override v" +
                    "oid TestUpdate_List_Null()\r\n        {\r\n\t\t\tbase.TestUpdate_List_Null();\r\n        " +
                    "}\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n   " +
                    "     public override void TestUpdate_List_Empty()\r\n        {\r\n\t\t\tbase.TestUpdate" +
                    "_List_Empty();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(A" +
                    "rgumentException))]\r\n        public override void TestUpdate_List_WithNonPersist" +
                    "ed()\r\n        {\r\n\t\t\tbase.TestUpdate_List_WithNonPersisted();\r\n        }\r\n\r\n     " +
                    "   [Test]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n        publi" +
                    "c override void TestUpdate_List_WithNull()\r\n        {\r\n\t\t\tbase.TestUpdate_List_W" +
                    "ithNull();\r\n        }\r\n\r\n        [Test]\r\n        public override void TestDelete" +
                    "()\r\n        {\r\n\t\t\tbase.TestDelete();\r\n        }\r\n\r\n        [Test]\r\n        [Expe" +
                    "ctedException(typeof(ArgumentException))]\r\n        public override void TestDele" +
                    "te_NotPersisted()\r\n        {\r\n\t\t\tbase.TestDelete_NotPersisted();\r\n        }\r\n\r\n " +
                    "       [Test]\r\n        [ExpectedException(typeof(ArgumentNullException))]\r\n     " +
                    "   public override void TestDelete_Null()\r\n        {\r\n\t\t\tbase.TestDelete_Null();" +
                    "\r\n        }\r\n\r\n        [Test]\r\n        public override void TestDelete_List()\r\n " +
                    "       {\r\n\t\t\tbase.TestDelete_List();\r\n        }\r\n\r\n        [Test]\r\n        [Expe" +
                    "ctedException(typeof(ArgumentNullException))]\r\n        public override void Test" +
                    "Delete_List_Null()\r\n        {\r\n\t\t\tbase.TestDelete_List_Null();\r\n        }\r\n\r\n   " +
                    "     [Test]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n        pub" +
                    "lic override void TestDelete_List_Empty()\r\n        {\r\n\t\t\tbase.TestDelete_List_Em" +
                    "pty();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentE" +
                    "xception))]\r\n        public override void TestDelete_List_WithNonPersisted()\r\n  " +
                    "      {\r\n\t\t\tbase.TestDelete_List_WithNonPersisted();\r\n        }\r\n\r\n        [Test" +
                    "]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n        public overri" +
                    "de void TestDelete_List_WithNull()\r\n        {\r\n\t\t\tbase.TestDelete_List_WithNull(" +
                    ");\r\n        }\r\n\r\n        [Test]\r\n        public override void TestDelete_Search(" +
                    ")\r\n        {\r\n\t\t\tbase.TestDelete_Search();\r\n        }\r\n\r\n        [Test]\r\n       " +
                    " [ExpectedException(typeof(ArgumentNullException))]\r\n        public override voi" +
                    "d TestDelete_Search_Null()\r\n        {\r\n\t\t\tbase.TestDelete_Search_Null();\r\n      " +
                    "  }\r\n\r\n        [Test]\r\n        public override void TestDeleteById()\r\n        {\r" +
                    "\n\t\t\tbase.TestDeleteById();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedExcept" +
                    "ion(typeof(ArgumentException))]\r\n        public override void TestDeleteById_Non" +
                    "Persisted()\r\n        {\r\n\t\t\tbase.TestDeleteById_NonPersisted();\r\n        }\r\n\r\n   " +
                    "     [Test]\r\n        public override void TestDeleteById_NonExistent()\r\n        " +
                    "{\r\n\t\t\tbase.TestDeleteById_NonExistent();\r\n        }\r\n\r\n        [Test]\r\n        p" +
                    "ublic override void TestDeleteById_List()\r\n        {\r\n\t\t\tbase.TestDeleteById_Lis" +
                    "t();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentNul" +
                    "lException))]\r\n        public override void TestDeleteById_List_Null()\r\n        " +
                    "{\r\n\t\t\tbase.TestDeleteById_List_Null();\r\n        }\r\n\r\n        [Test]\r\n        [Ex" +
                    "pectedException(typeof(ArgumentException))]\r\n        public override void TestDe" +
                    "leteById_List_Empty()\r\n        {\r\n\t\t\tbase.TestDeleteById_List_Empty();\r\n        " +
                    "}\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentException))]\r\n   " +
                    "     public override void TestDeleteById_List_WithNonPersisted()\r\n        {\r\n\t\t\t" +
                    "base.TestDeleteById_List_WithNonPersisted();\r\n        }\r\n\r\n        [Test]\r\n     " +
                    "   public override void TestDeleteById_List_WithNonExistent()\r\n        {\r\n\t\t\tbas" +
                    "e.TestDeleteById_List_WithNonExistent();\r\n        }\r\n\r\n        [Test]\r\n        p" +
                    "ublic override void TestSave_Insert()\r\n        {\r\n\t\t\tbase.TestSave_Insert();\r\n  " +
                    "      }\r\n\r\n        [Test]\r\n        public override void TestSave_List_Insert()\r\n" +
                    "        {\r\n\t\t\tbase.TestSave_List_Insert();\r\n        }\r\n\r\n        [Test]\r\n       " +
                    " public override void TestSave_List_InsertAndUpdate()\r\n        {\r\n\t\t\tbase.TestSa" +
                    "ve_List_InsertAndUpdate();\r\n        }\r\n\r\n        [Test]\r\n        public override" +
                    " void TestSave_Update()\r\n        {\r\n\t\t\tbase.TestSave_Update();\r\n        }\r\n\r\n   " +
                    "     [Test]\r\n        [ExpectedException(typeof(ArgumentNullException))]\r\n       " +
                    " public override void TestSave_Null()\r\n        {\r\n\t\t\tbase.TestSave_Null();\r\n    " +
                    "    }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentNullException" +
                    "))]\r\n        public override void TestSave_List_Null()\r\n        {\r\n\t\t\tbase.TestS" +
                    "ave_List_Null();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof" +
                    "(ArgumentException))]\r\n        public override void TestSave_List_Empty()\r\n     " +
                    "   {\r\n\t\t\tbase.TestSave_List_Empty();\r\n        }\r\n\r\n        [Test]\r\n        [Expe" +
                    "ctedException(typeof(ArgumentException))]\r\n        public override void TestSave" +
                    "_List_WithNull()\r\n        {\r\n\t\t\tbase.TestSave_List_WithNull();\r\n        }\r\n\r\n   " +
                    "     [Test]\r\n        public override void TestSave_List_Update()\r\n        {\r\n\t\t\t" +
                    "base.TestSave_List_Update();\r\n        }\r\n\r\n        [Test]\r\n        public overri" +
                    "de void TestCreate()\r\n        {\r\n\t\t\tbase.TestCreate();\r\n        }\r\n\r\n        [Te" +
                    "st]\r\n        public override void TestCreate_Generic()\r\n        {\r\n\t\t\tbase.TestC" +
                    "reate_Generic();\r\n        }\r\n\r\n        [Test]\r\n        public override void Test" +
                    "Search()\r\n        {\r\n\t\t\tbase.TestSearch();\r\n        }\r\n\r\n        [Test]\r\n       " +
                    " [ExpectedException(typeof(ArgumentNullException))]\r\n        public override voi" +
                    "d TestSearch_Null()\r\n        {\r\n\t\t\tbase.TestSearch_Null();\r\n        }\r\n\r\n       " +
                    " [Test]\r\n        public override void TestSearchUnique()\r\n        {\r\n\t\t\tbase.Tes" +
                    "tSearchUnique();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof" +
                    "(ArgumentNullException))]\r\n        public override void TestSearchUnique_Null()\r" +
                    "\n        {\r\n\t\t\tbase.TestSearchUnique_Null();\r\n        }\r\n\r\n        [Test]\r\n     " +
                    "   [ExpectedException(typeof(InvalidOperationException))]\r\n        public overri" +
                    "de void TestSearchUnique_NotUnique()\r\n        {\r\n\t\t\tbase.TestSearchUnique_NotUni" +
                    "que();\r\n        }\r\n    }\r\n}\r\n");
            
            #line 490 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"

        }
		else
		{


            
            #line default
            #line hidden
            this.Write("\t\t\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing FluentAssertions;\r\nus" +
                    "ing NUnit.Framework;\r\nusing Zirpl.AppEngine.Testing;\r\nusing Zirpl.AppEngine.Vali" +
                    "dation;\r\nusing ");
            
            #line 502 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetModelNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 503 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetPersistableModelTestsEntityWrapperNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 504 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetDataServiceInterfaceNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 505 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetDataContextNamespace()));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 506 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace ");
            
            #line 508 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsNamespace(domainType)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t[TestFixture]\r\n    public partial class ");
            
            #line 511 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 511 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsBaseTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\t}\r\n\r\n    [TestFixture]\r\n    public abstract partial class ");
            
            #line 516 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsBaseTypeName(domainType)));
            
            #line default
            #line hidden
            
            #line 516 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsBaseTypeBaseDeclaration(domainType)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\t\tprotected ");
            
            #line 518 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(" Service {get { return this.DependencyResolver.Resolve<");
            
            #line 518 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(">(); } }\r\n\t\tprotected ");
            
            #line 519 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsServicesProviderTypeName()));
            
            #line default
            #line hidden
            this.Write(" Services {get { return this.DependencyResolver.Resolve<");
            
            #line 519 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceTestsServicesProviderTypeName()));
            
            #line default
            #line hidden
            this.Write(">(); } }\r\n\t\t\r\n\t\tprotected override TSupports GetLayer<TSupports>()\r\n        {\r\n  " +
                    "          return this.DependencyResolver.Resolve<");
            
            #line 523 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetServiceInterfaceTypeName(domainType)));
            
            #line default
            #line hidden
            this.Write(">() as TSupports;\r\n        }\t\t\r\n        protected override AppEngine.DataService." +
                    "EntityFramework.DbContextBase CreateNewDbContext()\r\n        {\r\n            retur" +
                    "n new ");
            
            #line 527 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Helper.GetDataContextTypeName()));
            
            #line default
            #line hidden
            this.Write("();\r\n        }\r\n\t\t// AUTOGENERATE CODE NOTE: the tests are overridden here so tha" +
                    "t they will be easily identified when run as relating to this domain type. \r\n\r\n " +
                    "       [Test]\r\n        public override void TestGet()\r\n        {\r\n\t\t\tbase.TestGe" +
                    "t();\r\n        }\r\n\r\n\t\t[Test]\r\n        [ExpectedException(typeof(ArgumentException" +
                    "))]\r\n        public override void TestGet_NonPersistedId()\r\n        {\r\n\t\t\tbase.T" +
                    "estGet_NonPersistedId();\r\n        }\r\n\r\n        [Test]\r\n        public override v" +
                    "oid TestGet_NonExistentId()\r\n        {\r\n\t\t\tbase.TestGet_NonExistentId();\r\n      " +
                    "  }\r\n\r\n        [Test]\r\n        public override void TestExists()\r\n        {\r\n\t\t\t" +
                    "base.TestExists();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedException(type" +
                    "of(ArgumentException))]\r\n        public override void TestExists_NonPersistedId(" +
                    ")\r\n        {\r\n\t\t\tbase.TestExists_NonPersistedId();\r\n        }\r\n\r\n        [Test]\r" +
                    "\n        public override void TestExists_NonExistentId()\r\n        {\r\n\t\t\tbase.Tes" +
                    "tExists_NonExistentId();\r\n        }\r\n\r\n        [Test]\r\n        public override v" +
                    "oid TestGetAll()\r\n        {\r\n\t\t\tbase.TestGetAll();\r\n        }\r\n\r\n        [Test]\r" +
                    "\n        public override void TestGetQueryable()\r\n        {\r\n\t\t\tbase.TestGetQuer" +
                    "yable();\r\n        }\r\n\r\n        [Test]\r\n        public override void TestGetTotal" +
                    "Count()\r\n        {\r\n\t\t\tbase.TestGetTotalCount();\r\n        }\r\n\r\n        [Test]\r\n " +
                    "       [ExpectedException(typeof(ArgumentNullException))]\r\n        public overri" +
                    "de void TestGetTotalCount_Null()\r\n        {\r\n\t\t\tbase.TestGetTotalCount_Null();\r\n" +
                    "        }\r\n\r\n        [Test]\r\n        public override void TestSearch()\r\n        " +
                    "{\r\n\t\t\tbase.TestSearch();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedExceptio" +
                    "n(typeof(ArgumentNullException))]\r\n        public override void TestSearch_Null(" +
                    ")\r\n        {\r\n\t\t\tbase.TestSearch_Null();\r\n        }\r\n\r\n        [Test]\r\n        p" +
                    "ublic override void TestSearchUnique()\r\n        {\r\n\t\t\tbase.TestSearchUnique();\r\n" +
                    "        }\r\n\r\n        [Test]\r\n        [ExpectedException(typeof(ArgumentNullExcep" +
                    "tion))]\r\n        public override void TestSearchUnique_Null()\r\n        {\r\n\t\t\tbas" +
                    "e.TestSearchUnique_Null();\r\n        }\r\n\r\n        [Test]\r\n        [ExpectedExcept" +
                    "ion(typeof(InvalidOperationException))]\r\n        public override void TestSearch" +
                    "Unique_NotUnique()\r\n        {\r\n\t\t\tbase.TestSearchUnique_NotUnique();\r\n        }\r" +
                    "\n    }\r\n}\r\n");
            
            #line 628 "E:\projects\ZAppEngine\Zirpl.AppEngine.CodeGeneration.VS2013\V1\Templates\Tests\Service\EntityFramework\ServiceTestsTemplate.tt"

  
        }
	}

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ServiceTestsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
