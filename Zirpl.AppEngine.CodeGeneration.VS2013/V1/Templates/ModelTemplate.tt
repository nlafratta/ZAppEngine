<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".log" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.TextTemplating" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.V1" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.V1.ConfigModel" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="VSLangProj80" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Serialization" #>
<#
// Generate Model classes
//
foreach (DomainType domainType in this.TransformationHelper.DomainTypeFilters.DomainTypesToGenerateModelFor)
{
	this.TransformationHelper.FileHelper.StartModelFile(domainType);
		
#>
using System;
using System.Collections;
using System.Collections.Generic;
using Zirpl.AppEngine.Model;

namespace <#= this.TransformationHelper.CodeHelper.GetModelNamespace(domainType) #>
{
    public<#= domainType.IsAbstract ? " abstract" : "" #> partial class <#= this.TransformationHelper.CodeHelper.GetModelClassName(domainType) #> : <#= this.TransformationHelper.CodeHelper.GetModelBaseClassName(domainType) #>
    {
<#
	if (domainType.Properties != null)
	{
		// grab all the collection properties now so we
		// can add initializers in the Constructor
		//
		var collectionProperties = from p in domainType.Properties
									where p.IsCollection
									select p;
		if (collectionProperties.Count() > 0)
		{
			// handle the constructor
#>
		public <#= this.TransformationHelper.CodeHelper.GetModelClassName(domainType) #>()
		{
<#
			// initialize any collection properties (everything defaults to IList<T>
			foreach (var collectionProperty in collectionProperties)
			{
#>
			if (this.<#= collectionProperty.Name #> == null)
			{
				this.<#= collectionProperty.Name #> = new List<<#= collectionProperty.CollectionOfType #>>();
			}
<#
			}
#>
		}

<#
		}

		// now go through ALL properties
		foreach (var property in domainType.Properties)
		{
			if (property.IsCollection)
			{
#>
		public virtual IList<<#= property.CollectionOfType #>> <#= property.Name #> { get; set; }
<#
			}
			else
			{
				// the base class already has "Name" property, so skip that one
				if (property.Name != "Name")
                {
#>
		public virtual <#= this.TransformationHelper.CodeHelper.GetPropertyClassNameString(property) #> <#= property.Name #> { get; set; }
<#
					// handle the Id property of the relationship IE: "Parent" may need a "ParentId" property
					if (property.IsRelationship
						&& property.GenerateIdProperty)
					{
#>
		public virtual <#= this.TransformationHelper.CodeHelper.GetRelationshipIdPropertyClassNameString(property) #> <#= property.Name #>Id { get; set; }
<#
					}
                }
			}
		}
	}
#>
    }
}

<#
}
#>