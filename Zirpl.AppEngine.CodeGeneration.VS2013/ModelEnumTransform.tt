<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".log" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration" #>
<#@ import namespace="Zirpl.AppEngine.CodeGeneration.ConfigModel" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="VSLangProj80" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Serialization" #>
<#
var helper = new AppGenerator(this);

// now we create the dictionary enums
//
foreach (DomainType domainType in helper.DomainTypeFilters.DomainTypesToGenerateEnumFor)
{
	helper.StartEnumFile(domainType);
	
#>
using System;
using System.Collections;
using System.Collections.Generic;
using Zirpl.AppFramework.Model;

namespace <#= helper.NamingProvider.GetModelNamespace(domainType) #>
{
    public enum <#= domainType.Name #>Enum : <#= helper.TypeProvider.GetIdClass(domainType) #>
    {
<#
	if (domainType.EnumValueEntries != null)
	{
		var totalRemaining = domainType.EnumValueEntries.Count();
		foreach (var enumValueEntry in domainType.EnumValueEntries)
		{
			totalRemaining--;
#>
        <#= enumValueEntry.Key #> = <#= enumValueEntry.Value #><#= totalRemaining > 0 ? "," : "" #>
<#
					
		}
	}
#>
	}
}
<#
}

helper.End();
#>