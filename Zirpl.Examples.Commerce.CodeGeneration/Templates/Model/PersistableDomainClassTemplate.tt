<#@ template language="C#" hostSpecific="true" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation.TextTemplating" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Config" #>
<#@ import namespace="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.TextTemplating" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="VSLangProj80" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Serialization" #>
<#@ parameter type="Zirpl.AppEngine.VisualStudioAutomation.TextTemplating.PreprocessedTextTransformationOutputFile" name="TemplateOutputFile" #>
<#@ parameter type="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Config.App" name="App" #>
<#@ parameter type="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.Config.DomainType" name="DomainType" #>
<#@ parameter type="Zirpl.AppEngine.VisualStudioAutomation.AppGeneration.TextTemplating.OutputClass" name="OutputClass" #>
<#

#>
using System;
using System.Collections.Generic;
using System.Linq;
using Zirpl.AppEngine.Model;
using Zirpl.AppEngine.Model.Extensibility;
using Zirpl.Collections;

<#
	using (var writer = new ClassWriter(this, this.OutputClass))
    {
		foreach (var property in this.DomainType.Properties)
		{
#>
		public virtual <#= property.DataTypeString #> <#= property.Name #> { get; set; }
<#
		}
#>

		#region Interface implementations

<#
		if (this.DomainType.IsPersistable
			&& this.DomainType.InheritsFrom == null)
        {
#>
		public virtual Object GetId()
        {
            return Id;
        }

        public virtual void SetId(Object id)
        {
            Id = (<#= this.DomainType.IdProperty.DataTypeString      #>)id;
        }

        public virtual bool IsPersisted
        {
            get { return this.EvaluateIsPersisted(); }
        }

		public override bool Equals(object other)
        {
            return this.EvaluateEquals(other);
        }

        public override int GetHashCode()
        {
            return this.EvaluateGetHashCode();
        }
<#
        }
		
		if (this.DomainType.IsExtensible
                && (this.DomainType.InheritsFrom == null
                    || !this.DomainType.InheritsFrom.IsExtensible))
        {
#>
		public virtual IList<IExtendedEntityFieldValue> GetExtendedFieldValues()
		{
            return this.ExtendedFieldValues.Cast<IExtendedEntityFieldValue>().ToList();
		}
        public virtual void SetExtendedFieldValues(IList<IExtendedEntityFieldValue> list)
		{
            this.ExtendedFieldValues.Clear();
            this.ExtendedFieldValues.AddRange(list.Cast<<#= this.DomainType.ExtendedBy.FullName #>>());
		}
<#
        }

		if (this.DomainType.IsExtendedEntityFieldValue
			&& (this.DomainType.InheritsFrom == null
			|| !this.DomainType.InheritsFrom.IsExtendedEntityFieldValue))
        {
#>
        public virtual object GetExtendedEntityId()
        {
            return this.ExtendedEntityId;
        }

        public virtual IExtensible GetExtendedEntity()
        {
            return this.ExtendedEntity;
        }

        public virtual void SetExtendedEntityId(object id)
        {
            this.ExtendedEntityId = (<#= this.DomainType.IdProperty.DataTypeString      #>)id;
        }

        public virtual void SetExtendedEntity(IExtensible entity)
        {
            this.ExtendedEntity = (<#= this.DomainType.Extends.FullName #>)entity;
        }
		
<#
        }
#>
		#endregion		
<#
    }
#>